#1

Вам дан HTML код.
Необходимо создать такую же структуру HTML-элемента через JavaScript и добавить итоговый элементы внутрь тега body.
Решите задачу 2-мя способами:
через innerHTML;
через document.createElement.

#2

Вы вместе с командой разработки создаете приложение для контроля задач. Сейчас команда сделала только макет, чтобы приложение было красивым.
Вам поручили задачу отрисовать все данные о задачах при помощи JavaScript кода (способ выберите самостоятельно).
У вас имеется массив tasks и HTML-шаблон, по которому вам необходимо создать элементы для каждой задачи.
Добавьте все HTML-элементы с задачами в тег с классом “tasks-list”.
Данные об id должны использоваться в data-task-id, в id у input и в for у label.
Значение свойства text должно добавляться в тег span с классом “task-item__text”.
Примечание: атрибут for в JavaScript коде пишется как htmlFor.

#3

Вы отлично справились с поставленной задачей и теперь все элементы отрисовываются правильно. Теперь вам хотят предоставить дело посложнее.
Вам необходимо реализовать логику создания новых задач при помощи формы с классом “create-task-block”.
Используйте предыдущий код и повесьте обработчик событий submit на форму с классом “create-task-block”.
При отправке формы создавайте новую задачу в массиве tasks и в DOM-дереве (внутри тега с классом “tasks-list”).
id должен быть для каждой задачи уникальным. Текст для задачи берется из текстового поля с классом “create-task-block__input”.


#4

Вы молодец! Вы справились с задачей и отдали ее на код-ревью старшему разработчику. Но старший разработчик обнаружил,
что не нужно отправлять форму, если значение пустое либо задача с таким же названием уже существует. Поэтому вас просят добавить валидацию в ваш код.
Для блока с ошибкой создавайте тег span с классом “error-message-block”. Внутрь данного тега будет помещаться текст с ошибкой.
Если форма была отправлена с пустым полем, то отобразите ошибку “Название задачи не должно быть пустым”,
добавив блок с ошибкой в форму с классом “create-task-block”. Если же задача с введенным в поле названием уже существует,
то отображайте ошибку “Задача с таким названием уже существует.”
Если при отправке формы ошибок не было найдено, то удалите блок с ошибкой, если он существует в DOM, и создайте новую задачу в списке.


#5

Чтобы успешно завершить все ваши задачи на проекте, осталось выполнить только удаление задач. Для этого имеется кнопка “Удалить”.
Но иногда пользователи могут случайно нажать на кнопку и из-за этого удалится задача. Для этого обычно создаются модальные окна,
которые спрашивают пользователя, действительно ли он хочет удалить задачу. Сейчас вам необходимо будет реализовать такое модальное окно.
Стили для модального окна и HTML-шаблон у вас уже имеются. Создайте HTML-элемент модального окна с помощью JavaScript и добавьте его внутри тега body.
Класс “modal-overlay_hidden” отвечает за открытие и закрытие модального окна. Если оно открыто, то класса “modal-overlay_hidden” нету,
если закрыто, то класс “modal-overlay_hidden” присутствует.
Вам необходимо открывать модальное окно после нажатия на любую кнопку “Удалить” около каждой задачи.
 Повесьте обработчик события “click” на элемент с классом “tasks-list”. Используйте делегирование событий для того,
 чтобы отлавливать клики на кнопки для удаления задач.
В модальном окне есть 2 кнопки: “Отмена” и “Удалить”.
“Отмена” закрывает модальное окно, а “Удалить” - удаляет задачу из массива tasks и из DOM-дерева и закрывает модальное окно.
Для удаления задачи используйте атрибут data-task-id, который содержит информацию о свойстве id объекта задачи из массива tasks.
По данному id вы сможете найти нужную задачу и удалить ее.

#6

Вас поздравляет заказчик и команда разработки с успешной работой на проекте. Вы молодец! Хорошо себя показали.
Но тут один из разработчиков заболел и больше некому выполнить его задачу. Поэтому попросили вас подменить коллегу.
Вам необходимо реализовать смену темы с темной на светлую и наоборот. Тема должна переключаться при нажатии на кнопку “Tab”.
 Изначально тема светлая.
При смене темы вам необходимо изменить стили для следующих элементов:
элемент с тегом body. Если тема темная, то свойство background должно быть значением “#24292E”, иначе - “initial”.
Все элементы с классом “task-item”. Если тема темная, то свойство color должно быть “#ffffff”, иначе - “initial”.
Ко всем элементам с тегом button необходимо добавить значение “1px solid #ffffff”, если тема темная, иначе - “none”.
Для решения данной задачи используйте свойства style у html-элементов.
